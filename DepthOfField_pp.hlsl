
//--------------------------------------------------------------------------------------
// Depth of Field Post-Processing Pixel Shader
//--------------------------------------------------------------------------------------

#include "Common.hlsli"

#define SAMPLES 13

//--------------------------------------------------------------------------------------
// Textures (texture maps)
//--------------------------------------------------------------------------------------

// The scene has been rendered to a texture, these variables allow access to that texture
Texture2D SceneTexture : register(t0);
SamplerState PointSample : register(s0); // We don't usually want to filter (bilinear, trilinear etc.) the scene texture when
										  // post-processing so this sampler will use "point sampling" - no filtering

Texture2D DepthMap : register(t1);

//--------------------------------------------------------------------------------------
// Shader code
//--------------------------------------------------------------------------------------

// Post-processing shader that tints the scene texture to a given colour
float4 main(PostProcessingInput input) : SV_Target
{
    float3 focusColour = SceneTexture.Sample(PointSample, input.sceneUV).rgb;
    float3 finalColour = focusColour;
    
    float depth = DepthMap.Sample(PointSample, input.sceneUV).a;
    float dilation = DilationForDepth(DepthMap.Sample(PointSample, input.sceneUV).a);

    float brightness = RGBToBrightness(finalColour);
    
    const float2 offsets[] = { float2(-1.000000f, 0.000000f), float2(-0.928571f, -0.333333f), float2(-0.928571f, -0.250000f), float2(-0.928571f, -0.166667f), float2(-0.928571f, -0.083333f), float2(-0.928571f, 0.000000f), float2(-0.928571f, 0.083333f), float2(-0.928571f, 0.166667f), float2(-0.928571f, 0.250000f), float2(-0.928571f, 0.333333f), float2(-0.857143f, -0.500000f), float2(-0.857143f, -0.416667f), float2(-0.857143f, -0.333333f), float2(-0.857143f, -0.250000f), float2(-0.857143f, -0.166667f), float2(-0.857143f, -0.083333f), float2(-0.857143f, 0.000000f), float2(-0.857143f, 0.083333f), float2(-0.857143f, 0.166667f), float2(-0.857143f, 0.250000f), float2(-0.857143f, 0.333333f), float2(-0.857143f, 0.416667f), float2(-0.857143f, 0.500000f), float2(-0.785714f, -0.583333f), float2(-0.785714f, -0.500000f), float2(-0.785714f, -0.416667f), float2(-0.785714f, -0.333333f), float2(-0.785714f, -0.250000f), float2(-0.785714f, -0.166667f), float2(-0.785714f, -0.083333f), float2(-0.785714f, 0.000000f), float2(-0.785714f, 0.083333f), float2(-0.785714f, 0.166667f), float2(-0.785714f, 0.250000f), float2(-0.785714f, 0.333333f), float2(-0.785714f, 0.416667f), float2(-0.785714f, 0.500000f), float2(-0.785714f, 0.583333f), float2(-0.714286f, -0.666667f), float2(-0.714286f, -0.583333f), float2(-0.714286f, -0.500000f), float2(-0.714286f, -0.416667f), float2(-0.714286f, -0.333333f), float2(-0.714286f, -0.250000f), float2(-0.714286f, -0.166667f), float2(-0.714286f, -0.083333f), float2(-0.714286f, 0.000000f), float2(-0.714286f, 0.083333f), float2(-0.714286f, 0.166667f), float2(-0.714286f, 0.250000f), float2(-0.714286f, 0.333333f), float2(-0.714286f, 0.416667f), float2(-0.714286f, 0.500000f), float2(-0.714286f, 0.583333f), float2(-0.714286f, 0.666667f), float2(-0.642857f, -0.750000f), float2(-0.642857f, -0.666667f), float2(-0.642857f, -0.583333f), float2(-0.642857f, -0.500000f), float2(-0.642857f, -0.416667f), float2(-0.642857f, -0.333333f), float2(-0.642857f, -0.250000f), float2(-0.642857f, -0.166667f), float2(-0.642857f, -0.083333f), float2(-0.642857f, 0.000000f), float2(-0.642857f, 0.083333f), float2(-0.642857f, 0.166667f), float2(-0.642857f, 0.250000f), float2(-0.642857f, 0.333333f), float2(-0.642857f, 0.416667f), float2(-0.642857f, 0.500000f), float2(-0.642857f, 0.583333f), float2(-0.642857f, 0.666667f), float2(-0.642857f, 0.750000f), float2(-0.571429f, -0.750000f), float2(-0.571429f, -0.666667f), float2(-0.571429f, -0.583333f), float2(-0.571429f, -0.500000f), float2(-0.571429f, -0.416667f), float2(-0.571429f, -0.333333f), float2(-0.571429f, -0.250000f), float2(-0.571429f, -0.166667f), float2(-0.571429f, -0.083333f), float2(-0.571429f, 0.000000f), float2(-0.571429f, 0.083333f), float2(-0.571429f, 0.166667f), float2(-0.571429f, 0.250000f), float2(-0.571429f, 0.333333f), float2(-0.571429f, 0.416667f), float2(-0.571429f, 0.500000f), float2(-0.571429f, 0.583333f), float2(-0.571429f, 0.666667f), float2(-0.571429f, 0.750000f), float2(-0.500000f, -0.833333f), float2(-0.500000f, -0.750000f), float2(-0.500000f, -0.666667f), float2(-0.500000f, -0.583333f), float2(-0.500000f, -0.500000f), float2(-0.500000f, -0.416667f), float2(-0.500000f, -0.333333f), float2(-0.500000f, -0.250000f), float2(-0.500000f, -0.166667f), float2(-0.500000f, -0.083333f), float2(-0.500000f, 0.000000f), float2(-0.500000f, 0.083333f), float2(-0.500000f, 0.166667f), float2(-0.500000f, 0.250000f), float2(-0.500000f, 0.333333f), float2(-0.500000f, 0.416667f), float2(-0.500000f, 0.500000f), float2(-0.500000f, 0.583333f), float2(-0.500000f, 0.666667f), float2(-0.500000f, 0.750000f), float2(-0.500000f, 0.833333f), float2(-0.428571f, -0.833333f), float2(-0.428571f, -0.750000f), float2(-0.428571f, -0.666667f), float2(-0.428571f, -0.583333f), float2(-0.428571f, -0.500000f), float2(-0.428571f, -0.416667f), float2(-0.428571f, -0.333333f), float2(-0.428571f, -0.250000f), float2(-0.428571f, -0.166667f), float2(-0.428571f, -0.083333f), float2(-0.428571f, 0.000000f), float2(-0.428571f, 0.083333f), float2(-0.428571f, 0.166667f), float2(-0.428571f, 0.250000f), float2(-0.428571f, 0.333333f), float2(-0.428571f, 0.416667f), float2(-0.428571f, 0.500000f), float2(-0.428571f, 0.583333f), float2(-0.428571f, 0.666667f), float2(-0.428571f, 0.750000f), float2(-0.428571f, 0.833333f), float2(-0.357143f, -0.916667f), float2(-0.357143f, -0.833333f), float2(-0.357143f, -0.750000f), float2(-0.357143f, -0.666667f), float2(-0.357143f, -0.583333f), float2(-0.357143f, -0.500000f), float2(-0.357143f, -0.416667f), float2(-0.357143f, -0.333333f), float2(-0.357143f, -0.250000f), float2(-0.357143f, -0.166667f), float2(-0.357143f, -0.083333f), float2(-0.357143f, 0.000000f), float2(-0.357143f, 0.083333f), float2(-0.357143f, 0.166667f), float2(-0.357143f, 0.250000f), float2(-0.357143f, 0.333333f), float2(-0.357143f, 0.416667f), float2(-0.357143f, 0.500000f), float2(-0.357143f, 0.583333f), float2(-0.357143f, 0.666667f), float2(-0.357143f, 0.750000f), float2(-0.357143f, 0.833333f), float2(-0.357143f, 0.916667f), float2(-0.285714f, -0.916667f), float2(-0.285714f, -0.833333f), float2(-0.285714f, -0.750000f), float2(-0.285714f, -0.666667f), float2(-0.285714f, -0.583333f), float2(-0.285714f, -0.500000f), float2(-0.285714f, -0.416667f), float2(-0.285714f, -0.333333f), float2(-0.285714f, -0.250000f), float2(-0.285714f, -0.166667f), float2(-0.285714f, -0.083333f), float2(-0.285714f, 0.000000f), float2(-0.285714f, 0.083333f), float2(-0.285714f, 0.166667f), float2(-0.285714f, 0.250000f), float2(-0.285714f, 0.333333f), float2(-0.285714f, 0.416667f), float2(-0.285714f, 0.500000f), float2(-0.285714f, 0.583333f), float2(-0.285714f, 0.666667f), float2(-0.285714f, 0.750000f), float2(-0.285714f, 0.833333f), float2(-0.285714f, 0.916667f), float2(-0.214286f, -0.916667f), float2(-0.214286f, -0.833333f), float2(-0.214286f, -0.750000f), float2(-0.214286f, -0.666667f), float2(-0.214286f, -0.583333f), float2(-0.214286f, -0.500000f), float2(-0.214286f, -0.416667f), float2(-0.214286f, -0.333333f), float2(-0.214286f, -0.250000f), float2(-0.214286f, -0.166667f), float2(-0.214286f, -0.083333f), float2(-0.214286f, 0.000000f), float2(-0.214286f, 0.083333f), float2(-0.214286f, 0.166667f), float2(-0.214286f, 0.250000f), float2(-0.214286f, 0.333333f), float2(-0.214286f, 0.416667f), float2(-0.214286f, 0.500000f), float2(-0.214286f, 0.583333f), float2(-0.214286f, 0.666667f), float2(-0.214286f, 0.750000f), float2(-0.214286f, 0.833333f), float2(-0.214286f, 0.916667f), float2(-0.142857f, -0.916667f), float2(-0.142857f, -0.833333f), float2(-0.142857f, -0.750000f), float2(-0.142857f, -0.666667f), float2(-0.142857f, -0.583333f), float2(-0.142857f, -0.500000f), float2(-0.142857f, -0.416667f), float2(-0.142857f, -0.333333f), float2(-0.142857f, -0.250000f), float2(-0.142857f, -0.166667f), float2(-0.142857f, -0.083333f), float2(-0.142857f, 0.000000f), float2(-0.142857f, 0.083333f), float2(-0.142857f, 0.166667f), float2(-0.142857f, 0.250000f), float2(-0.142857f, 0.333333f), float2(-0.142857f, 0.416667f), float2(-0.142857f, 0.500000f), float2(-0.142857f, 0.583333f), float2(-0.142857f, 0.666667f), float2(-0.142857f, 0.750000f), float2(-0.142857f, 0.833333f), float2(-0.142857f, 0.916667f), float2(-0.071429f, -0.916667f), float2(-0.071429f, -0.833333f), float2(-0.071429f, -0.750000f), float2(-0.071429f, -0.666667f), float2(-0.071429f, -0.583333f), float2(-0.071429f, -0.500000f), float2(-0.071429f, -0.416667f), float2(-0.071429f, -0.333333f), float2(-0.071429f, -0.250000f), float2(-0.071429f, -0.166667f), float2(-0.071429f, -0.083333f), float2(-0.071429f, 0.000000f), float2(-0.071429f, 0.083333f), float2(-0.071429f, 0.166667f), float2(-0.071429f, 0.250000f), float2(-0.071429f, 0.333333f), float2(-0.071429f, 0.416667f), float2(-0.071429f, 0.500000f), float2(-0.071429f, 0.583333f), float2(-0.071429f, 0.666667f), float2(-0.071429f, 0.750000f), float2(-0.071429f, 0.833333f), float2(-0.071429f, 0.916667f), float2(0.000000f, -1.000000f), float2(0.000000f, -0.916667f), float2(0.000000f, -0.833333f), float2(0.000000f, -0.750000f), float2(0.000000f, -0.666667f), float2(0.000000f, -0.583333f), float2(0.000000f, -0.500000f), float2(0.000000f, -0.416667f), float2(0.000000f, -0.333333f), float2(0.000000f, -0.250000f), float2(0.000000f, -0.166667f), float2(0.000000f, -0.083333f), float2(0.000000f, 0.000000f), float2(0.000000f, 0.083333f), float2(0.000000f, 0.166667f), float2(0.000000f, 0.250000f), float2(0.000000f, 0.333333f), float2(0.000000f, 0.416667f), float2(0.000000f, 0.500000f), float2(0.000000f, 0.583333f), float2(0.000000f, 0.666667f), float2(0.000000f, 0.750000f), float2(0.000000f, 0.833333f), float2(0.000000f, 0.916667f), float2(0.000000f, 1.000000f), float2(0.071429f, -0.916667f), float2(0.071429f, -0.833333f), float2(0.071429f, -0.750000f), float2(0.071429f, -0.666667f), float2(0.071429f, -0.583333f), float2(0.071429f, -0.500000f), float2(0.071429f, -0.416667f), float2(0.071429f, -0.333333f), float2(0.071429f, -0.250000f), float2(0.071429f, -0.166667f), float2(0.071429f, -0.083333f), float2(0.071429f, 0.000000f), float2(0.071429f, 0.083333f), float2(0.071429f, 0.166667f), float2(0.071429f, 0.250000f), float2(0.071429f, 0.333333f), float2(0.071429f, 0.416667f), float2(0.071429f, 0.500000f), float2(0.071429f, 0.583333f), float2(0.071429f, 0.666667f), float2(0.071429f, 0.750000f), float2(0.071429f, 0.833333f), float2(0.071429f, 0.916667f), float2(0.142857f, -0.916667f), float2(0.142857f, -0.833333f), float2(0.142857f, -0.750000f), float2(0.142857f, -0.666667f), float2(0.142857f, -0.583333f), float2(0.142857f, -0.500000f), float2(0.142857f, -0.416667f), float2(0.142857f, -0.333333f), float2(0.142857f, -0.250000f), float2(0.142857f, -0.166667f), float2(0.142857f, -0.083333f), float2(0.142857f, 0.000000f), float2(0.142857f, 0.083333f), float2(0.142857f, 0.166667f), float2(0.142857f, 0.250000f), float2(0.142857f, 0.333333f), float2(0.142857f, 0.416667f), float2(0.142857f, 0.500000f), float2(0.142857f, 0.583333f), float2(0.142857f, 0.666667f), float2(0.142857f, 0.750000f), float2(0.142857f, 0.833333f), float2(0.142857f, 0.916667f), float2(0.214286f, -0.916667f), float2(0.214286f, -0.833333f), float2(0.214286f, -0.750000f), float2(0.214286f, -0.666667f), float2(0.214286f, -0.583333f), float2(0.214286f, -0.500000f), float2(0.214286f, -0.416667f), float2(0.214286f, -0.333333f), float2(0.214286f, -0.250000f), float2(0.214286f, -0.166667f), float2(0.214286f, -0.083333f), float2(0.214286f, 0.000000f), float2(0.214286f, 0.083333f), float2(0.214286f, 0.166667f), float2(0.214286f, 0.250000f), float2(0.214286f, 0.333333f), float2(0.214286f, 0.416667f), float2(0.214286f, 0.500000f), float2(0.214286f, 0.583333f), float2(0.214286f, 0.666667f), float2(0.214286f, 0.750000f), float2(0.214286f, 0.833333f), float2(0.214286f, 0.916667f), float2(0.285714f, -0.916667f), float2(0.285714f, -0.833333f), float2(0.285714f, -0.750000f), float2(0.285714f, -0.666667f), float2(0.285714f, -0.583333f), float2(0.285714f, -0.500000f), float2(0.285714f, -0.416667f), float2(0.285714f, -0.333333f), float2(0.285714f, -0.250000f), float2(0.285714f, -0.166667f), float2(0.285714f, -0.083333f), float2(0.285714f, 0.000000f), float2(0.285714f, 0.083333f), float2(0.285714f, 0.166667f), float2(0.285714f, 0.250000f), float2(0.285714f, 0.333333f), float2(0.285714f, 0.416667f), float2(0.285714f, 0.500000f), float2(0.285714f, 0.583333f), float2(0.285714f, 0.666667f), float2(0.285714f, 0.750000f), float2(0.285714f, 0.833333f), float2(0.285714f, 0.916667f), float2(0.357143f, -0.916667f), float2(0.357143f, -0.833333f), float2(0.357143f, -0.750000f), float2(0.357143f, -0.666667f), float2(0.357143f, -0.583333f), float2(0.357143f, -0.500000f), float2(0.357143f, -0.416667f), float2(0.357143f, -0.333333f), float2(0.357143f, -0.250000f), float2(0.357143f, -0.166667f), float2(0.357143f, -0.083333f), float2(0.357143f, 0.000000f), float2(0.357143f, 0.083333f), float2(0.357143f, 0.166667f), float2(0.357143f, 0.250000f), float2(0.357143f, 0.333333f), float2(0.357143f, 0.416667f), float2(0.357143f, 0.500000f), float2(0.357143f, 0.583333f), float2(0.357143f, 0.666667f), float2(0.357143f, 0.750000f), float2(0.357143f, 0.833333f), float2(0.357143f, 0.916667f), float2(0.428571f, -0.833333f), float2(0.428571f, -0.750000f), float2(0.428571f, -0.666667f), float2(0.428571f, -0.583333f), float2(0.428571f, -0.500000f), float2(0.428571f, -0.416667f), float2(0.428571f, -0.333333f), float2(0.428571f, -0.250000f), float2(0.428571f, -0.166667f), float2(0.428571f, -0.083333f), float2(0.428571f, 0.000000f), float2(0.428571f, 0.083333f), float2(0.428571f, 0.166667f), float2(0.428571f, 0.250000f), float2(0.428571f, 0.333333f), float2(0.428571f, 0.416667f), float2(0.428571f, 0.500000f), float2(0.428571f, 0.583333f), float2(0.428571f, 0.666667f), float2(0.428571f, 0.750000f), float2(0.428571f, 0.833333f), float2(0.500000f, -0.833333f), float2(0.500000f, -0.750000f), float2(0.500000f, -0.666667f), float2(0.500000f, -0.583333f), float2(0.500000f, -0.500000f), float2(0.500000f, -0.416667f), float2(0.500000f, -0.333333f), float2(0.500000f, -0.250000f), float2(0.500000f, -0.166667f), float2(0.500000f, -0.083333f), float2(0.500000f, 0.000000f), float2(0.500000f, 0.083333f), float2(0.500000f, 0.166667f), float2(0.500000f, 0.250000f), float2(0.500000f, 0.333333f), float2(0.500000f, 0.416667f), float2(0.500000f, 0.500000f), float2(0.500000f, 0.583333f), float2(0.500000f, 0.666667f), float2(0.500000f, 0.750000f), float2(0.500000f, 0.833333f), float2(0.571429f, -0.750000f), float2(0.571429f, -0.666667f), float2(0.571429f, -0.583333f), float2(0.571429f, -0.500000f), float2(0.571429f, -0.416667f), float2(0.571429f, -0.333333f), float2(0.571429f, -0.250000f), float2(0.571429f, -0.166667f), float2(0.571429f, -0.083333f), float2(0.571429f, 0.000000f), float2(0.571429f, 0.083333f), float2(0.571429f, 0.166667f), float2(0.571429f, 0.250000f), float2(0.571429f, 0.333333f), float2(0.571429f, 0.416667f), float2(0.571429f, 0.500000f), float2(0.571429f, 0.583333f), float2(0.571429f, 0.666667f), float2(0.571429f, 0.750000f), float2(0.642857f, -0.750000f), float2(0.642857f, -0.666667f), float2(0.642857f, -0.583333f), float2(0.642857f, -0.500000f), float2(0.642857f, -0.416667f), float2(0.642857f, -0.333333f), float2(0.642857f, -0.250000f), float2(0.642857f, -0.166667f), float2(0.642857f, -0.083333f), float2(0.642857f, 0.000000f), float2(0.642857f, 0.083333f), float2(0.642857f, 0.166667f), float2(0.642857f, 0.250000f), float2(0.642857f, 0.333333f), float2(0.642857f, 0.416667f), float2(0.642857f, 0.500000f), float2(0.642857f, 0.583333f), float2(0.642857f, 0.666667f), float2(0.642857f, 0.750000f), float2(0.714286f, -0.666667f), float2(0.714286f, -0.583333f), float2(0.714286f, -0.500000f), float2(0.714286f, -0.416667f), float2(0.714286f, -0.333333f), float2(0.714286f, -0.250000f), float2(0.714286f, -0.166667f), float2(0.714286f, -0.083333f), float2(0.714286f, 0.000000f), float2(0.714286f, 0.083333f), float2(0.714286f, 0.166667f), float2(0.714286f, 0.250000f), float2(0.714286f, 0.333333f), float2(0.714286f, 0.416667f), float2(0.714286f, 0.500000f), float2(0.714286f, 0.583333f), float2(0.714286f, 0.666667f), float2(0.785714f, -0.583333f), float2(0.785714f, -0.500000f), float2(0.785714f, -0.416667f), float2(0.785714f, -0.333333f), float2(0.785714f, -0.250000f), float2(0.785714f, -0.166667f), float2(0.785714f, -0.083333f), float2(0.785714f, 0.000000f), float2(0.785714f, 0.083333f), float2(0.785714f, 0.166667f), float2(0.785714f, 0.250000f), float2(0.785714f, 0.333333f), float2(0.785714f, 0.416667f), float2(0.785714f, 0.500000f), float2(0.785714f, 0.583333f), float2(0.857143f, -0.500000f), float2(0.857143f, -0.416667f), float2(0.857143f, -0.333333f), float2(0.857143f, -0.250000f), float2(0.857143f, -0.166667f), float2(0.857143f, -0.083333f), float2(0.857143f, 0.000000f), float2(0.857143f, 0.083333f), float2(0.857143f, 0.166667f), float2(0.857143f, 0.250000f), float2(0.857143f, 0.333333f), float2(0.857143f, 0.416667f), float2(0.857143f, 0.500000f), float2(0.928571f, -0.333333f), float2(0.928571f, -0.250000f), float2(0.928571f, -0.166667f), float2(0.928571f, -0.083333f), float2(0.928571f, 0.000000f), float2(0.928571f, 0.083333f), float2(0.928571f, 0.166667f), float2(0.928571f, 0.250000f), float2(0.928571f, 0.333333f), float2(1.000000f, 0.000000f) };
    
    const float offsetCount = 525;

    [unroll(offsetCount)]
    for (float i = 0; i < offsetCount; i++)
    {
        // Sample the UV at an offset.
        float2 offset = offsets[i];
        
        offset.x *= gDilationSize.x;
        offset.y *= gDilationSize.y;
        
        float3 sampledColour = SceneTexture.Sample(PointSample, input.sceneUV + offset).rgb;
    
        // Keep track of the pixel if it is the brightest so far. Ignore it if its inside the focal range.
        float sampleBrightness = RGBToBrightness(sampledColour);
        float sampleDepth = DepthMap.Sample(PointSample, input.sceneUV + offset).a;
        float sampleDilation = DilationForDepth(sampleDepth);
        if (sampleBrightness > brightness && sampleDilation > 0.01f && depth + 0.005f > sampleDepth && sampleDilation + 0.5f > dilation)
        {
            finalColour = sampledColour;
            brightness = sampleBrightness;
            dilation = sampleDilation;
            depth = sampleDepth;
        }
    }
    
    // The brighter the brightest sampled colour is, the more of an effect it has on the final colour. 
    finalColour = lerp(focusColour, finalColour, smoothstep(gDilationThreshold.x, gDilationThreshold.y, dilation * brightness));

    return float4(finalColour, dilation);
}